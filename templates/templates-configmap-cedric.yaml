apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-custom-templates
data:
  home.html: |
    {% extends "page.html" %}
    {% if announcement_home is string %}
      {% set announcement = announcement_home %}
    {% endif %}
    {% block main %}
      <div class="container">
        <h1 class="sr-only">JupyterHub home page</h1>
        {% if allow_named_servers %}
          <h2>Servers</h2>
          {% if user.admin %}
            <p>
              You can launch an unlimited number of servers (admin only). Regular users are limited to 1 server.
              When adding servers using the 'Add New Server' button, don't add any spaces or capital letters in the server name!
            </p>
          {% else %}
            <p>
              You can launch a total of {{ named_server_limit_per_user + 1 }} server(s).
            </p>
          {% endif %}
          {% set named_spawners = user.all_spawners(include_default=False)|list %}
          <table class="server-table table table-striped">
            <thead>
              <tr>
                <th>Server name</th>
                <th>Profile</th>
                <th># of GPUs</th>
                <th>URL</th>
                <th>Last activity</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr class="home-server-row" data-server-name="default">
                <td>gpu-server</td>
                <td>
                  {% if default_server.user_options.profile and default_server.active %}
                    {{ default_server.user_options.profile }}
                  {% else %}
                    &nbsp
                  {% endif %}
                </td>
                <td>
                  {% if default_server.user_options.GPUNum and default_server.active %}
                    {{ default_server.user_options.GPUNum }}
                  {% elif not default_server.active %}
                    &nbsp
                  {% else %}
                    0
                  {% endif %}
                </td>
                <td>
                  <a class="server-link {% if not default_server.active %}hidden{% endif %}"
                    href="{{ user.server_url('') }}">{{ user.server_url('') }}</a>
                </td>
                <td class='time-col'>
                  {% if default_server.last_activity %}
                    {{ default_server.last_activity.isoformat() + 'Z' }}
                  {% else %}
                    Never
                  {% endif %}
                </td>
                <td>
                  <a role="button"
                    class="stop-server btn btn-xs btn-danger{% if not default_server.active %} hidden{% endif %}"
                    id="stop"
                    href="{{ url }}">Stop Server</a>
                  <a role="button"
                    class="start-server btn btn-xs btn-primary {% if default_server.active %}hidden{% endif %}"
                    id="start"
                    href="{{ url }}">Start Server</a>
                </td>
              </tr>
              {% for spawner in named_spawners %}
                <tr class="home-server-row" data-server-name="{{ spawner.name }}">
                  <td>{{ spawner.name }}</td>
                  <td>
                    {% if spawner.user_options.profile and spawner.ready %}
                      {{ spawner.user_options.profile }}
                    {% else %}
                      &nbsp
                    {% endif %}
                  </td>
                  <td>
                    {% if spawner.user_options.GPUNum and spawner.ready %}
                      {{ spawner.user_options.GPUNum }}
                    {% elif not spawner.ready %}
                      &nbsp
                    {% else %}
                      0
                    {% endif %}
                  </td>
                  <td>
                    <a class="server-link {% if not spawner.ready %}hidden{% endif %}"
                      href="{{ user.server_url(spawner.name) }}">{{ user.server_url(spawner.name) }}</a>
                  </td>
                  <td class='time-col'>
                    {% if spawner.last_activity %}
                      {{ spawner.last_activity.isoformat() + 'Z' }}
                    {% else %}
                      Never
                    {% endif %}
                  </td>
                  <td>
                    <a role="button"
                      class="stop-server btn btn-xs btn-danger{% if not spawner.active %} hidden{% endif %}"
                      id="stop-{{ spawner.name }}">Stop Server</a>
                    <a role="button"
                      class="start-server btn btn-xs btn-primary {% if spawner.active %}hidden{% endif %}"
                      id="start-{{ spawner.name }}"
                      href="{{ base_url }}spawn/{{ user.name }}/{{ spawner.name }}">Start Server</a>
                    <button role="button"
                            class="delete-server btn btn-xs btn-danger{% if spawner.active %} hidden{% endif %}"
                            id="delete-{{ spawner.name }}">Delete Server</button>
                  </td>
                </tr>
              {% endfor %}
              {% if user.admin or named_spawners|length < named_server_limit_per_user %}
                <tr class="home-server-row add-server-row">
                  <td colspan="6">
                    <div class="input-group">
                      <input class="new-server-name form-control"
                            aria-label="server name"
                            placeholder="name-your-server">
                      <button role="button"
                              type="button"
                              class="new-server-btn btn btn-xs btn-primary">Add New Server</button>
                    </div>
                  </td>
                </tr>
              {% endif %}
            </tbody>
          </table>
        {% endif %}
      </div>
    {% endblock main %}
    {% block script %}
      {{ super() }}
      <script type="text/javascript">
        require(["home"]);
      </script>
    {% endblock script %}

  spawn.html: |
    {% extends "page.html" %}
    {% if announcement_spawn is string %}
      {% set announcement = announcement_spawn %}
    {% endif %}
    {% block main %}
    <div class="container">
      {% block heading %}
      <div class="row text-center">
        <h1>Server Options</h1>
      </div>
      {% endblock %}
      <div class="row col-sm-offset-2 col-sm-8">
        {% if for_user and user.name != for_user.name -%}
          <p>Spawning server for {{ for_user.name }}</p>
        {% endif -%}
        {% if error_message -%}
          <p class="spawn-error-msg text-danger">
            Error: {{error_message}}
          </p>
        {% endif %}
        <form enctype="multipart/form-data" id="spawn_form" action="{{ url | safe }}" method="post" role="form">
          {{spawner_options_form | safe}}
          <br>
          <div class="feedback-container">
            <input type="submit" value="Start" class="btn btn-jupyter form-control">
            <div class="feedback-widget hidden">
              <i class="fa fa-spinner"></i>
            </div>
          </div>
        </form>
      </div>

    <!-- GPU Availability Section -->
    <div class="row col-sm-offset-2 col-sm-8" style="margin-top: 20px; align-items: center;">
      <div class="gpu-status" style="font-size: 1.3em; text-align: center;">
        <h3>GPU Availability</h3>
        <div class="table-wrapper" style="width: 40%; margin: 0 auto;">
          <table id="gpu-status-container" class="table table-bordered" style="display: none;">
            <thead>
              <tr>
                <th>Node Profile</th>
                <th>Available GPUs</th>
              </tr>
            </thead>
            <tbody>
              <!-- This section will be dynamically updated -->
            </tbody>
          </table>
        </div>
        <h4 style="font-weight: normal; margin: 0;">Your server will fail to launch if you request more <s>cats</s> GPUs than available!</h4>
      </div>
    </div>
    </div>
    {% endblock %}
    {% block script %}
      {{ super() }}
      <script>
      // setup onSubmit feedback
      $('form').submit((e) => {
        var form = $(e.target);
        form.find('.feedback-container>input').attr('disabled', true);
        form.find('.feedback-container>*').toggleClass('hidden');
        form.find('.feedback-widget>*').toggleClass('fa-pulse');
      });

      // Function to update GPU status
      function updateGpuStatus() {
        const baseUrl = window.location.origin;
        const fetchUrl = `${baseUrl.split(':')[0]}:${baseUrl.split(':')[1]}:5000/gpu_status`;
        fetch(fetchUrl)
          .then(response => response.json())
          .then(data => {
            const container = document.getElementById('gpu-status-container');
            container.innerHTML = ''; // Clear previous content

            data.forEach(gpuInfo => {
              const availableGpus = gpuInfo.capacity - gpuInfo.total_gpu_requests;
              container.innerHTML += `
                <tr>
                  <td>${gpuInfo.node_profile}</td>
                  <td>${availableGpus}&nbsp;${'ðŸ˜¸'.repeat(availableGpus)}</td>
                </tr>
              `; 
            });
            // Show the table once data is loaded
            container.style.display = 'table';
          })
          .catch(error => {
            console.error('Error fetching GPU status:', error);
            const container = document.getElementById('gpu-status-container');
            container.innerHTML = `<p>Error fetching data: ${error.message}</p>`; // Use backticks for template literals
          });
      }

      // Update GPU status every 10 seconds
      setInterval(updateGpuStatus, 10000);

      // Initial update
      updateGpuStatus();
      </script>
    {% endblock %}

  spawn_pending.html: |
    {% extends "page.html" %}
    {% block main %}
      <div class="container" style="width: 100%; max-width: 1400px; padding: 20px;">
        <div class="row">
          <div class="text-center">
            {% block message %}
              <p>Your server is starting up.</p>
              <p>You will be redirected automatically when it's ready for you.</p>
            {% endblock message %}
            <div class="progress">
              <div id="progress-bar"
                  class="progress-bar"
                  role="progressbar"
                  aria-valuenow="0"
                  aria-valuemin="0"
                  aria-valuemax="100">
                <span class="sr-only"><span id="sr-progress">0%</span> Complete</span>
              </div>
            </div>
            <p id="progress-message"></p>
          </div>
        </div>
        <div class="row justify-content-center">
          <div class="col-md-8">
            <details id="progress-details">
              <summary>Event log</summary>
              <div id="progress-log"></div>
            </details>
          </div>
        </div>
        <!-- Embedding the Munchy Worm game on the spawn pending page -->
        <div style="text-align: center; width: 100%"; padding: 20px 0">
          <h3>Play some Muchy Worm while your server launches!</h3>
            <object data="https://antibody-software.com/munchy-worm-game/index" style="width: 100%; height: 80vh; border: none; overflow: auto;">
            <p>Your browser does not support this object.</p>
        </div>
      </div>
    {% endblock main %}
    {% block script %}
      {{ super() }}
      <script type="text/javascript">
        require(["jquery"], function($) {
          $("#refresh").click(function() {
            window.location.reload();
          });

          // hook up event-stream for progress
          var evtSource = new EventSource("{{ progress_url }}");
          var progressMessage = $("#progress-message");
          var progressBar = $("#progress-bar");
          var srProgress = $("#sr-progress");
          var progressLog = $("#progress-log");

          evtSource.onmessage = function(e) {
            var evt = JSON.parse(e.data);
            console.log(evt);
            if (evt.progress !== undefined) {
              // update progress
              var progText = evt.progress.toString();
              progressBar.attr('aria-valuenow', progText);
              srProgress.text(progText + '%');
              progressBar.css('width', progText + '%');
            }
            // update message
            var html_message;
            if (evt.html_message !== undefined) {
              progressMessage.html(evt.html_message);
              html_message = evt.html_message;
            } else if (evt.message !== undefined) {
              progressMessage.text(evt.message);
              html_message = progressMessage.html();
            }
            if (html_message) {
              progressLog.append(
                $("<div>")
                .addClass('progress-log-event')
                .html(html_message)
              );
            }

            if (evt.ready) {
              evtSource.close();
              // reload the current page
              // which should result in a redirect to the running server
              window.location.reload();
            }

            if (evt.failed) {
              evtSource.close();
              // turn progress bar red
              progressBar.addClass('progress-bar-danger');
              // open event log for debugging
              $('#progress-details').prop('open', true);
            }
          };

          // signal that page has finished loading (mostly for tests)
          window._jupyterhub_page_loaded = true;
        });
      </script>
    {% endblock script %}
