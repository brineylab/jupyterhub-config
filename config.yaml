# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#

# disable user and server culling
cull:
  enabled: false

singleuser:
  # networking
  # for some reason, notebook server spawning fails if networkPolicy is set to true
  networkPolicy:
    enabled: false
  # limits and guarantees
  memory:
    limit: 512G
    guarantee: 1G
  cpu:
    limit: 128
    guarantee: 1
  # grant sudo and set user/group ID
  extraEnv:
    GRANT_SUDO: "yes"
  uid: 0
  fsGid: 0
  # default image
  image:
    name: brineylab/jupyterhub-datascience
    tag: v0.1.9
  # alternate profiles (images)
  profileList:
    - display_name: "data science"
      description: "default brineylab data analysis environment, including interpreters for Python, R, and Julia"
      default: true
      kubespawner_override:
        lifecycle_hooks:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  mkdir -p ${HOME}/codeserver;
    - display_name: "deep learning"
      description: "extends the data science environment to include GPU-enabled torch and ðŸ¤— libraries, as well as some deep learning-specific JupyterLab extensions"
      kubespawner_override:
        image: brineylab/jupyterhub-deeplearning:v0.1.9
        # extra_resource_limits:
        #   nvidia.com/gpu: "1"
        lifecycle_hooks:
          postStart:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  mkdir -p ${HOME}/codeserver;
  # storage
  storage:
    dynamic:
      storageClass: nfs-marlo-ssd
    capacity: 250Gi

    extraVolumes:
      # sequencing data: NovaSeq
      - name: nfs-avon-novaseq6k
        persistentVolumeClaim:
          claimName: nfs-avon-novaseq6k
      # sequencing data: NextSeq
      - name: nfs-avon-nextseq2k
        persistentVolumeClaim:
          claimName: nfs-avon-nextseq2k
      # shared data
      - name: nfs-propjoe-shared
        persistentVolumeClaim:
          claimName: nfs-propjoe-shared
      # - name: nfs-stringer-shared
      #   persistentVolumeClaim:
      #     claimName: nfs-stringer-shared
    extraVolumeMounts:
      - name: nfs-avon-novaseq6k
        mountPath: /home/jovyan/sequencing_runs/novaseq
      - name: nfs-avon-nextseq2k
        mountPath: /home/jovyan/sequencing_runs/nextseq
      - name: nfs-propjoe-shared
        mountPath: /home/jovyan/shared
      # - name: nfs-stringer-shared
      #   mountPath: /home/jovyan/shared

hub:
  containerSecurityContext:
    runAsUser: 0
    runAsGroup: 0
  config:
    Authenticator:
      admin_users:
        - bryan
      allowed_users:
        - jonathan
        - pragati
        - terrence
        - sarah
        - sean
        - morgan
        - benjamin
      # admin_access: true
    JupyterHub:
      authenticator_class: "nativeauthenticator.NativeAuthenticator"
      # allow_named_servers: true
      load_groups:
        {
          "brineylab":
            [
              "bryan",
              "jonathan",
              "pragati",
              "terrence",
              "sarah",
              "sean",
              "morgan",
              "benjamin",
            ],
          "external": ["bryan"],
        }
      # load_roles: [
      # {
      #   "name": "brineylab-role",
      #   "description": "can access other users servers in the brineylab group",
      #   "scopes": ["access:servers!group=brineylab"],
      #   "groups": ["brineylab"],
      # },
      # {
      #   "name": "external-role",
      #   "description": "can access other users servers in the external group",
      #   "scopes": ["access:servers!group=external"],
      #   "groups": ["brineylab"],
      # },
      # ]
    NativeAuthenticator:
      enable_signup: true
      # ask_email_on_signup: true

  extraConfig:
    00-first-config: |
      c.KubeSpawner.allow_privilege_escalation = True
      c.KubeSpawner.args = ["--allow-root", "--collaborative=True"]
      import os, nativeauthenticator
      c.JupyterHub.template_paths = [f"{os.path.dirname(nativeauthenticator.__file__)}/templates/"]

    # 01-mount-user-volumes: |
    #   def user_pvcs(spawner):
    #       shared_vols = {
    #           "shared" : [
    #               "bryan",
    #               "jonathan",
    #               "benjamin",
    #               "terrence",
    #               "sarah",
    #               "sean",
    #               "morgan",
    #               "pragati",
    #             ],

    #           # # PERSONAL VOLUMES (not currently used)
    #           # "bryan" : [ "bryan" ],
    #           # "jonathan" : [ "jonathan", "bryan"],
    #           # "benjamin" : [ "benjamin", "bryan"],
    #           # "terrence" : [ "terrence", "bryan"],
    #           # "sarah" : [ "sarah", "bryan"],
    #           # "sean" : [ "sean", "bryan"],
    #           # "morgan" : [ "morgan", "bryan"],
    #           # "pragati" : [ "pragati", "bryan"],
    #         }

    #       try:
    #           user=spawner.user.name
    #           for mnt in shared_vols:
    #               if user in shared_vols[mnt]:
    #                   spawner.log.info("Adding volume for user " + user + " and mount " + mnt)
    #                   claim_name = "nfs-propjoe-shared" if mnt == "shared" else "brineylab-personal-pvc-" + mnt
    #                   spawner.volumes.extend([
    #                       {
    #                           "name": mnt,
    #                           "persistentVolumeClaim": {"claimName": claim_name},
    #                       }
    #                   ])
    #                   spawner.volume_mounts.extend([
    #                       {
    #                           "mountPath": "/home/jovyan/" + mnt,
    #                           "name": mnt,
    #                       }
    #                   ])
    #       except Exception as e:
    #           spawner.log.info("Exception in brineylab-mounts" + str(e))
    #           pass
    #   c.KubeSpawner.pre_spawn_hook = user_pvcs

    # # OLD AND UNUSED
    # # --------------
    # from kubernetes import client
    # from kubespawner.utils import get_k8s_model
    # from kubernetes.client.models import ( V1Volume, V1VolumeMount )
    # import json
    # def modify_pod_hook(spawner, pod):
    #     shared_vols = {
    #         "shared" : [
    #             "bryan",
    #             "jonathan",
    #             "benjamin",
    #             "terrence",
    #             "sarah",
    #             "sean",
    #             "morgan",
    #             "pragati",
    #           ],
    #         "bryan" : [ "bryan" ],
    #         "jonathan" : [ "jonathan", "bryan"],
    #         "benjamin" : [ "benjamin", "bryan"],
    #         "terrence" : [ "terrence", "bryan"],
    #         "sarah" : [ "sarah", "bryan"],
    #         "sean" : [ "sean", "bryan"],
    #         "morgan" : [ "morgan", "bryan"],
    #         "pragati" : [ "pragati", "bryan"],
    #       }
    #     try:
    #         user=spawner.user.name
    #         for mnt in shared_vols:
    #             if user in shared_vols[mnt]:
    #               spawner.log.info("Adding volume for user " + user + " and mount " + mnt)
    #               claim_name = "nfs-propjoe-shared" if mnt == "shared" else "brineylab-personal-pvc-"" + mnt
    #               pod.spec.volumes.append(
    #                 get_k8s_model(V1Volume,
    #                 { "name" : mnt,
    #                   "persistentVolumeClaim": { "claimName" : claim_name }
    #                 }
    #                 )
    #               )
    #               # Note implicitly only 1 container...
    #               pod.spec.containers[0].volume_mounts.append(
    #                 get_k8s_model(V1VolumeMount,
    #                     { "name" : mnt, "mountPath" : "/home/jovyan/" + mnt } )
    #               )
    #     except Exception as e:
    #         spawner.log.info("Exception in brineylab-mounts" + str(e))
    #         pass
    #     return pod
    # c.KubeSpawner.modify_pod_hook = modify_pod_hook
