# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#

# prePuller:
#   hook:
#     enabled: false

# disable user and server culling
cull:
  enabled: false

# from https://z2jh.jupyter.org/en/stable/administrator/optimization.html
scheduling:
  userScheduler:
    enabled: false

singleuser:
  cmd: jupyterhub-singleuser
  defaultUrl: lab

  # networking
  # for some reason, notebook server spawning fails if networkPolicy is set to true
  networkPolicy:
    enabled: false

  # limits and guarantees
  memory:
    limit: 512G
    guarantee: 64G

  cpu:
    limit: 128
    guarantee: 16

  # set extra environmental vars
  extraEnv:
    GRANT_SUDO: "yes"
  uid: 0
  fsGid: 0

  # required for codeserver to launch
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            mkdir -p ${HOME}/codeserver;

  # default image
  image:
    name: brineylab/jupyterhub-datascience
    tag: v2024-08-13

  # profiles
  profileList:
    - display_name: "data science"
      description: "default data analysis environment, including interpreters for Python and R <br> v2024-08-13"
      default: true
    - display_name: "deep learning"
      description: "extends the data science environment to include ML libraries (such as torch, deepspeed, and ðŸ¤—) <br> v2024-08-13"
      kubespawner_override:
        image: brineylab/jupyterhub-deeplearning:v2024-08-13

  # storage
  storage:
    dynamic:
      storageClass: nfs-marlo-ssd
    capacity: 250Gi

    extraVolumes:
      # sequencing data: NovaSeq
      - name: nfs-avon-novaseq6k
        persistentVolumeClaim:
          claimName: nfs-avon-novaseq6k
      # sequencing data: NextSeq
      - name: nfs-avon-nextseq2k
        persistentVolumeClaim:
          claimName: nfs-avon-nextseq2k
      # sequencing data: ont
      - name: nfs-stringer-ont
        persistentVolumeClaim:
          claimName: nfs-stringer-ont
      # shared
      - name: nfs-propjoe-shared
        persistentVolumeClaim:
          claimName: nfs-propjoe-shared
      # references
      - name: nfs-propjoe-references
        persistentVolumeClaim:
          claimName: nfs-propjoe-references
          readOnly: true

    extraVolumeMounts:
      - name: nfs-avon-novaseq6k
        mountPath: /home/jovyan/sequencing_runs/novaseq
      - name: nfs-avon-nextseq2k
        mountPath: /home/jovyan/sequencing_runs/nextseq
      - name: nfs-stringer-ont
        mountPath: /home/jovyan/sequencing_runs/ont
      - name: nfs-propjoe-shared
        mountPath: /home/jovyan/shared
      - name: nfs-propjoe-references
        mountPath: /home/jovyan/references

hub:
  networkPolicy:
    enabled: false
  
  containerSecurityContext:
    runAsUser: 0
    runAsGroup: 0

  # Mount users configmaps
  extraVolumes:
    - name: users-config
      configMap:
        name: users-config   
  extraVolumeMounts:
    - mountPath: /etc/jupyterhub/auth
      name: users-config

  config:
    JupyterHub:
      authenticator_class: "nativeauthenticator.NativeAuthenticator"

    NativeAuthenticator:
      enable_signup: true

  extraConfig:
    00-first-config: |
      c.KubeSpawner.environment = {'NB_UMASK': '0000'}
      c.KubeSpawner.allow_privilege_escalation = True
      c.KubeSpawner.args = ["--allow-root"]
      import os, nativeauthenticator
      c.JupyterHub.template_paths = [f"{os.path.dirname(nativeauthenticator.__file__)}/templates/"]
    
    # set admin and allowed (gpu + regular) users
    users: |
      import yaml
      with open("/etc/jupyterhub/auth/users.yaml") as f:
        users = yaml.safe_load(f)

      c.Authenticator.admin_users = users.get("admin", [])
      c.Authenticator.allowed_users = set(users.get("admin", []) + users.get("gpu", []) + users.get("regular", [])) 