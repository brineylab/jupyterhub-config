# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/

# disable user and server culling
cull:
  enabled: false

# from https://z2jh.jupyter.org/en/stable/administrator/optimization.html
scheduling:
  userScheduler:
    enabled: false

# Update images here
# NOTE: Images need to be updated in a second place in this file.
#       This only updates the image puller, so that new images get
#       pulled during the helm upgrade.
prePuller:
  extraImages:
    datascience:
      name: brineylab/jupyterhub-datascience
      tag: v2024-09-12
    deeplearning:
      name: brineylab/jupyterhub-deeplearning
      tag: v2024-09-12

singleuser:
  cmd: jupyterhub-singleuser
  defaultUrl: lab

  # networking (notebook server spawning fails if networkPolicy is set to true)
  networkPolicy:
    enabled: false

  # set extra environmental vars
  extraEnv:
    GRANT_SUDO: "yes"
  uid: 0
  fsGid: 0

  # default resource limits
  # used for cpu pods 
  # or for pods launched w/o a profile (only happens from the admin page, I think)
  memory:
    limit: 512G
    guarantee: 64G
  cpu:
    limit: 128
    guarantee: 16
  extraResource:
    limits:
      ephemeral-storage: "200Gi"
    guarantees:
      ephemeral-storage: "20Gi"
  image:
    name: "brineylab/jupyterhub-datascience"
    tag: "v2024-09-12"

  # required for codeserver to launch
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            mkdir -p ${HOME}/codeserver;

  storage:
    dynamic:
      storageClass: nfs-wallace-jh-nvme
    capacity: 250Gi

    extraVolumes:
      # shared
      - name:  nfs-wallace-shared
        persistentVolumeClaim:
          claimName: nfs-wallace-shared
      # references
      - name: nfs-wallace-references
        persistentVolumeClaim:
          claimName: nfs-wallace-references
          readOnly: true
      # sequencing data: NovaSeq
      - name: nfs-avon-novaseq6k
        persistentVolumeClaim:
          claimName: nfs-avon-novaseq6k
      # sequencing data: NextSeq
      - name: nfs-avon-nextseq2k
        persistentVolumeClaim:
          claimName: nfs-avon-nextseq2k
      # sequencing data: ONT
      - name: nfs-stringer-ont
        persistentVolumeClaim:
          claimName: nfs-stringer-ont
      # dshm - needed for training on gpu servers running jupyterhub
      - name: dshm
        emptyDir:
          medium: Memory
          sizeLimit: "10Gi"
    extraVolumeMounts:
      - name: nfs-wallace-shared
        mountPath: /home/jovyan/shared
      - name: nfs-wallace-references
        mountPath: /home/jovyan/references
      - name: nfs-avon-novaseq6k
        mountPath: /home/jovyan/sequencing_runs/novaseq
      - name: nfs-avon-nextseq2k
        mountPath: /home/jovyan/sequencing_runs/nextseq
      - name: nfs-stringer-ont
        mountPath: /home/jovyan/sequencing_runs/ont
      - name: dshm
        mountPath: /dev/shm

hub:
  networkPolicy:
    enabled: false

  containerSecurityContext:
    runAsUser: 0
    runAsGroup: 0

  # Mount users and home page configmaps
  extraVolumes:
    - name: templates
      configMap:
        name: templates
    - name: extra-config
      configMap:
        name: extra-config
  extraVolumeMounts:
    - mountPath: /etc/jupyterhub/templates
      name: templates
    - mountPath: /etc/jupyterhub/config
      name: extra-config

  config:
    JupyterHub:
      authenticator_class: "nativeauthenticator.NativeAuthenticator"
      default_url: "/hub/home"

    NativeAuthenticator:
      enable_signup: true

  extraConfig:
    # set env variables
    env: |
      c.KubeSpawner.environment = {'NB_UMASK': '0000'}
      c.KubeSpawner.allow_privilege_escalation = True
      c.KubeSpawner.args = ["--allow-root"]
    
    # add custom templates to template path
    templates: |
      import os, nativeauthenticator

      # inject custom templates
      c.JupyterHub.template_paths = [f"{os.path.dirname(nativeauthenticator.__file__)}/templates/"]
      c.JupyterHub.template_paths.insert(0, "/etc/jupyterhub/templates")

      # set url for gpu status
      c.JupyterHub.template_vars.update({
          "gpu_status_url": "http://172.29.180.217:5000/gpu_status_bynode"
      })

    # set admin and allowed users -> allow admin and gpu users only
    users: |
      import yaml
      with open("/etc/jupyterhub/config/users.yaml") as f:
        users = yaml.safe_load(f)

      c.Authenticator.admin_users = users.get("admin", [])
      c.Authenticator.allowed_users = set(users.get("admin", []) + users.get("gpu", []) + users.get("regular", [])) 

    # handle custom named server limit
    # ref: https://jupyterhub.readthedocs.io/en/stable/howto/configuration/config-user-env.html#named-servers
    # src code: https://github.com/jupyterhub/jupyterhub/blob/main/jupyterhub/app.py#L1341
    namedServers: |
      def custom_named_server_limit(handler):
        with open("/etc/jupyterhub/config/users.yaml") as f:
          users = yaml.safe_load(f)

        user = handler.current_user.name

        if user in users.get("admin", []):
            return 0 # unlimited
        elif user in users.get("gpu", []):
            return 2 # 3 servers total

        return 1 # 2 servers total

      c.JupyterHub.allow_named_servers = True
      c.JupyterHub.named_server_limit_per_user = custom_named_server_limit

    # custom profiles
    # import options form and pre-spawn hook helper fns from extra-config configmap
    options-form: |    
      import yaml
      import sys

      # import functions
      sys.path.append('/etc/jupyterhub/config')
      from options_form import dynamic_options_form_withconfig
      from prespawn_hook import set_spawner_resources

      # read node info
      with open("/etc/jupyterhub/config/nodes.yaml", "r") as file:
        node_info = yaml.safe_load(file)

      # update images and options for number of GPUs here
      # datascience is default for cpu servers, deeplearning is default for gpu servers
      CONFIG = {
        "images": {
            "datascience": "brineylab/jupyterhub-datascience:v2024-09-12",
            "deeplearning": "brineylab/jupyterhub-deeplearning:v2024-09-12",
        },
        "gpu_counts": [1, 2, 4],
        "node_info": node_info["mcnulty"],
        "server_type": "cpu-gpu" # can be: "cpu-gpu", "cpu-only", and "gpu-only"
      }
      
      # options for users to select from
      c.KubeSpawner.options_form = dynamic_options_form_withconfig(CONFIG)

      # pre-spawn hook to set resource limits based on user selections
      c.KubeSpawner.pre_spawn_hook = lambda spawner: set_spawner_resources(spawner, CONFIG)      