# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c

# JupyterHub configuration values

cull:
  enabled: false

scheduling:
  userScheduler:
    enabled: false

singleuser:
  cmd: jupyterhub-singleuser
  defaultUrl: lab

  networkPolicy:
    enabled: false

  memory:
    limit: 512G
    guarantee: 64G

  cpu:
    limit: 128
    guarantee: 16

  extraEnv:
    GRANT_SUDO: "yes"
  uid: 0
  fsGid: 0

  storage:
    # don't change default volume
    dynamic:
      storageClass: nfs-wallace-jh-nvme
    capacity: 250Gi

#    extraVolumes:
#      # shared volume
#      - name: nfs-wallace-shared-nvme
#        persistentVolumeClaim:
#          claimName: nfs-propjoe-shared
#      - name: dshm
#        emptyDir:
#          medium: Memory
#          sizeLimit: "10Gi"
#    extraVolumeMounts:
#      # shared volume
#      - name: nfs-propjoe-shared
#        mountPath: /home/jovyan/shared
#      - name: dshm
#        mountPath: /dev/shm

#proxy:
#  service:
#    type: NodePort
#    nodePorts:
#      http: 32151

hub:
  networkPolicy:
    enabled: false
  containerSecurityContext:
    runAsUser: 0
    runAsGroup: 0

  extraVolumes:
    - name: jupyterhub-custom-templates
      configMap:
        name: jupyterhub-custom-templates
  extraVolumeMounts:
    - mountPath: /etc/jupyterhub/templates
      name: jupyterhub-custom-templates

  config:
    # required to enable gpu
    # https://discourse.jupyter.org/t/set-runtimeclassname-for-gpu-enabled-images/21617/5
    KubeSpawner:
      extra_pod_config:
        runtimeClassName: nvidia

    Authenticator:
      admin_users:
        - bryan
        - sarah
        - terrence
      allowed_users:
        - jonathan
        - pragati
        - nitesh
        - simone
        - sean
        - morgan
        - benjamin
        - jyothi
        - nathan
        - karenna
        - daniella
        - praneeth
        - collin

    JupyterHub:
      authenticator_class: "nativeauthenticator.NativeAuthenticator"
      allow_named_servers: true
      named_server_limit_per_user: 1
      default_url: "/hub/home"

    NativeAuthenticator:
      enable_signup: true

  extraConfig:
    00-first-config: |
      c.KubeSpawner.environment = {'NB_UMASK': '0000'}
      c.KubeSpawner.allow_privilege_escalation = True
      c.KubeSpawner.args = ["--allow-root"]
      import os, nativeauthenticator
      c.JupyterHub.template_paths = [f"{os.path.dirname(nativeauthenticator.__file__)}/templates/"]
      c.JupyterHub.template_paths.insert(0, "/etc/jupyterhub/templates")
    
    # modified from https://github.com/neurohackademy/nh2020-jupyterhub/blob/8bc0d8304d5090d3a1e21a038a68f0a940e31809/deployments/hub-neurohackademy-org/config/prod.yaml
    # ref for profile_options: https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html
    options-form: |
        async def dynamic_options_form(self):
            
            # update images here
            datascience = "brineylab/jupyterhub-datascience:v2024-05-23"
            deeplearning = "brineylab/jupyterhub-deeplearning:v2024-05-23"

            # define lifecycle hook
            hook = {
              "postStart": {
                "exec": {
                  "command": ["/bin/sh", "-c", "mkdir -p $HOME/codeserver"]
                }
              }
            }
            
            self.profile_list = [
                {
                    "display_name": "data science - no gpu",
                    "description": "default brineylab data analysis environment, including interpreters for Python and R as well as VS Code <br> v2024-05-23",
                    "default": True,
                    "kubespawner_override": {
                      "image": datascience,
                      "lifecycle_hooks": hook,
                    }
                },
                {
                    "display_name": "deep learning - no gpu",
                    "description": "extends the data science environment to include torch and ðŸ¤— libraries, as well as some deep learning-specific JupyterLab extensions and deepspeed support  <br> v2024-05-23",
                    "kubespawner_override": {
                      "image": deeplearning,
                      "lifecycle_hooks": hook,
                    }
                },
                {
                    "display_name": "deep learning - with gpu",
                    "description": "extends the data science environment to include torch and ðŸ¤— libraries, as well as some deep learning-specific JupyterLab extensions and deepspeed support  <br> v2024-05-23",
                    "kubespawner_override": {
                      "image": deeplearning,
                      "lifecycle_hooks": hook,
                    },
                    "profile_options": {
                        "GPUs": {
                          "display_name": "Number of GPUs",
                          "choices": {
                            str(i): {
                              "display_name": str(i),
                              "kubespawner_override": {
                                  "extra_resource_limits": {"nvidia.com/gpu": i},
                              },
                            } for i in [1, 2]
                          },
                        }
                      },
                },
            ]

            # profiles visible for gpu users only
            gpu = ['sarah', 'simone', 'praneeth', 'karenna']
            if self.user.name in gpu or self.user.admin:
                self.profile_list.extend([
                  {
                      "display_name": "deep learning - L40s",
                      "description": "Only visible to GPU users. Allows users to select the number of GPUs they want.",
                      "kubespawner_override": {
                        "image": deeplearning,
                        "lifecycle_hooks": hook,
                      },
                      "profile_options": {
                        "GPUs": {
                          "display_name": "Number of GPUs",
                          "choices": {
                            str(i): {
                              "display_name": str(i),
                              "kubespawner_override": {
                                  "extra_resource_limits": {"nvidia.com/gpu": i},
                              },
                            } for i in [1, 2, 4]
                          },
                        }
                      },
                  },
                ])

            # testing
            # if self.server_url == '':
            #   self.profile_list.extend([
            #       {
            #           "display_name": "deep learning - L40s 2",
            #           "description": "Only visible to GPU users. Allows users to select the number of GPUs they want.",
            #           "kubespawner_override": {
            #             "image": deeplearning,
            #             "lifecycle_hooks": {
            #               "postStart": {
            #                 "exec": {
            #                   "command": ["/bin/sh", "-c", "mkdir -p $HOME/codeserver"]
            #                 }
            #               }
            #             }
            #           },
            #           "profile_options": {
            #             "GPUs": {
            #               "display_name": "Number of GPUs",
            #               "choices": {
            #                 str(i): {
            #                   "display_name": str(i),
            #                   "kubespawner_override": {
            #                       "extra_resource_limits": {"nvidia.com/gpu": i},
            #                   },
            #                 } for i in [1, 2, 4]
            #               },
            #             }
            #           },
            #       },
            #     ])

            # NOTE: We let KubeSpawner inspect profile_list and decide what to
            #       return, it will return a falsy blank string if there is no
            #       profile_list, which makes no options form be presented.
            #
            # ref: https://github.com/jupyterhub/kubespawner/blob/37a80abb0a6c826e5c118a068fa1cf2725738038/kubespawner/spawner.py#L1885-L1935
            #
            return self._options_form_default()

        c.KubeSpawner.options_form = dynamic_options_form
