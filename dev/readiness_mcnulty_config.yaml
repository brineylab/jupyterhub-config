# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/

# disable user and server culling
cull:
  enabled: false

# from https://z2jh.jupyter.org/en/stable/administrator/optimization.html
scheduling:
  userScheduler:
    enabled: false

# Update images here
prePuller:
  extraImages:
    datascience:
      name: brineylab/jupyterhub-datascience
      tag: v2024-09-12
    deeplearning:
      name: brineylab/jupyterhub-deeplearning
      tag: v2024-09-12

singleuser:
  cmd: jupyterhub-singleuser
  defaultUrl: lab
  networkPolicy:
    enabled: false
  extraEnv:
    GRANT_SUDO: "yes"
  uid: 0
  fsGid: 0
  memory:
    limit: 512T
    guarantee: 64G
  cpu:
    limit: 128
    guarantee: 16
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            mkdir -p ${HOME}/codeserver;

  profileList:
    - display_name: "data science"
      default: true
      kubespawner_override:
        image: "brineylab/jupyterhub-datascience:v2024-09-12"
        node_selector:
          node_profile: "cpu"

  storage:
    dynamic:
      storageClass: nfs-wallace-jh-nvme
    capacity: 250Gi
    extraVolumes:
      - name: nfs-wallace-shared
        persistentVolumeClaim:
          claimName: nfs-wallace-shared
      - name: nfs-wallace-references
        persistentVolumeClaim:
          claimName: nfs-wallace-references
          readOnly: true
    extraVolumeMounts:
      - name: nfs-wallace-shared
        mountPath: /home/jovyan/shared
      - name: nfs-wallace-references
        mountPath: /home/jovyan/references

proxy:
  service:
    type: LoadBalancer  # Expose the proxy service via LoadBalancer
    port: 8080           # The external facing port
    targetPort: 8080     # Port inside the container
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"

hub:
  networkPolicy:
    enabled: false

  containerSecurityContext:
    runAsUser: 0
    runAsGroup: 0

  livenessProbe:
    httpGet:
      path: /hub/health
      port: 8080  # Make sure this matches the exposed port for the hub
    initialDelaySeconds: 300
    timeoutSeconds: 3
    periodSeconds: 10
    failureThreshold: 30

  readinessProbe:
    httpGet:
      path: /hub/health
      port: 8080  # Make sure this matches the exposed port for the hub
    initialDelaySeconds: 60
    timeoutSeconds: 3
    periodSeconds: 10
    failureThreshold: 1

  extraVolumes:
    - name: jupyterhub-custom-templates
      configMap:
        name: jupyterhub-custom-templates
    - name: users-config
      configMap:
        name: users-config
  extraVolumeMounts:
    - mountPath: /etc/jupyterhub/templates
      name: jupyterhub-custom-templates
    - mountPath: /etc/jupyterhub/auth
      name: users-config

  config:
    JupyterHub:
      authenticator_class: "nativeauthenticator.NativeAuthenticator"
      default_url: "/hub/home"

    NativeAuthenticator:
      enable_signup: true

  extraConfig:
    env: |
      c.KubeSpawner.environment = {'NB_UMASK': '0000'}
      c.KubeSpawner.allow_privilege_escalation = True
      c.KubeSpawner.args = ["--allow-root"]

    templates: |
      import os, nativeauthenticator
      c.JupyterHub.template_paths = [f"{os.path.dirname(nativeauthenticator.__file__)}/templates/"]
      c.JupyterHub.template_paths.insert(0, "/etc/jupyterhub/templates")

    users: |
      import yaml
      with open("/etc/jupyterhub/auth/users.yaml") as f:
        users = yaml.safe_load(f)

      c.Authenticator.admin_users = users.get("admin", [])
      c.Authenticator.allowed_users = set(users.get("admin", []) + users.get("gpu", []) + users.get("regular", []))

    namedServers: |
      def custom_named_server_limit(handler):
        with open("/etc/jupyterhub/auth/users.yaml") as f:
          users = yaml.safe_load(f)

        user = handler.current_user.name

        if user in users.get("admin", []):
            return 0
        elif user in users.get("gpu", []):
            return 2

        return 1

      c.JupyterHub.allow_named_servers = True
      c.JupyterHub.named_server_limit_per_user = custom_named_server_limit

    options-form: |
      def define_num_gpus(num_gpus):
        return {
          "GPUNum": {
            "display_name": "Number of GPUs",
            "choices": {
              str(i): {
                "display_name": str(i),
                "kubespawner_override": {
                  "extra_resource_limits": {"nvidia.com/gpu": i},
                  "extra_pod_config": {"runtimeClassName": "nvidia"},
                } if i > 0 else {},
              } for i in num_gpus
            },
          }
        }

      def define_gpu_types(gpu_types):
        return {
          "GPUType": {
            "display_name": "Type of GPU",
            "choices": {
              str(i): {
                "display_name": str(i),
                "kubespawner_override": {
                  "node_selector": {"node_profile": i},
                },
              } for i in gpu_types
            },
          }
        }

      def define_custom_images(deeplearning, datascience):
        return {
          "Image": {
            "display_name": "Image",
            "choices": {
              "deeplearning": {
                "display_name": "deep learning",
                "default": True,
                "kubespawner_override": {"image": deeplearning},
              },
              "datascience": {
                "display_name": "data science",
                "kubespawner_override": {"image": datascience},
              },
            },
            "unlisted_choice": {
              "enabled": True,
              "display_name": "Enter custom image",
              "display_name_in_choices": "other - select to provide a custom image",
              "validation_regex": '^.+/.+:.+$',
              "validation_message": 'Must be an image matching <user>/<name>:<tag>',
              "kubespawner_override": {
                "image": "{value}",
                "start_timeout": 600,
              },
            },
          }
        }

      async def dynamic_options_form(self):
          datascience = "brineylab/jupyterhub-datascience:v2024-09-12"
          deeplearning = "brineylab/jupyterhub-deeplearning:v2024-09-12"

          import yaml
          with open("/etc/jupyterhub/auth/users.yaml") as f:
            users = yaml.safe_load(f)
          gpu = users.get("gpu", [])

          if not self.name:
            self.profile_list = [
              {
                "display_name": "data science (cpu only)",
                "default": True,
                "kubespawner_override": {
                  "image": datascience,
                  "node_selector": {"node_profile": "cpu"},
                }
              }
            ]

          else:
            if self.user.name in gpu or self.user.admin:
              self.profile_list = [
                {
                  "display_name": "Power-limited GPUs",
                  "profile_options": {
                    **define_custom_images(deeplearning, datascience),
                    **define_gpu_types(["A6000-pwrlimit", "L40s-pwrlimit"]),
                    **define_num_gpus([1, 2, 4]),
                  },
                }
              ]

          return self._options_form_default()

      c.KubeSpawner.options_form = dynamic_options_form
